// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: habana.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_habana_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_habana_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_habana_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_habana_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_habana_2eproto;
namespace habana {
class AIP;
class AIPDefaultTypeInternal;
extern AIPDefaultTypeInternal _AIP_default_instance_;
class DriverVersion;
class DriverVersionDefaultTypeInternal;
extern DriverVersionDefaultTypeInternal _DriverVersion_default_instance_;
class MACaddress;
class MACaddressDefaultTypeInternal;
extern MACaddressDefaultTypeInternal _MACaddress_default_instance_;
class PCIeInfo;
class PCIeInfoDefaultTypeInternal;
extern PCIeInfoDefaultTypeInternal _PCIeInfo_default_instance_;
}  // namespace habana
PROTOBUF_NAMESPACE_OPEN
template<> ::habana::AIP* Arena::CreateMaybeMessage<::habana::AIP>(Arena*);
template<> ::habana::DriverVersion* Arena::CreateMaybeMessage<::habana::DriverVersion>(Arena*);
template<> ::habana::MACaddress* Arena::CreateMaybeMessage<::habana::MACaddress>(Arena*);
template<> ::habana::PCIeInfo* Arena::CreateMaybeMessage<::habana::PCIeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace habana {

// ===================================================================

class AIP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:habana.AIP) */ {
 public:
  inline AIP() : AIP(nullptr) {}
  virtual ~AIP();

  AIP(const AIP& from);
  AIP(AIP&& from) noexcept
    : AIP() {
    *this = ::std::move(from);
  }

  inline AIP& operator=(const AIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIP& operator=(AIP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIP* internal_default_instance() {
    return reinterpret_cast<const AIP*>(
               &_AIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AIP& a, AIP& b) {
    a.Swap(&b);
  }
  inline void Swap(AIP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIP* New() const final {
    return CreateMaybeMessage<AIP>(nullptr);
  }

  AIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIP& from);
  void MergeFrom(const AIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "habana.AIP";
  }
  protected:
  explicit AIP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_habana_2eproto);
    return ::descriptor_table_habana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHLnumberFieldNumber = 1,
  };
  // string HLnumber = 1;
  void clear_hlnumber();
  const std::string& hlnumber() const;
  void set_hlnumber(const std::string& value);
  void set_hlnumber(std::string&& value);
  void set_hlnumber(const char* value);
  void set_hlnumber(const char* value, size_t size);
  std::string* mutable_hlnumber();
  std::string* release_hlnumber();
  void set_allocated_hlnumber(std::string* hlnumber);
  private:
  const std::string& _internal_hlnumber() const;
  void _internal_set_hlnumber(const std::string& value);
  std::string* _internal_mutable_hlnumber();
  public:

  // @@protoc_insertion_point(class_scope:habana.AIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hlnumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_habana_2eproto;
};
// -------------------------------------------------------------------

class DriverVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:habana.DriverVersion) */ {
 public:
  inline DriverVersion() : DriverVersion(nullptr) {}
  virtual ~DriverVersion();

  DriverVersion(const DriverVersion& from);
  DriverVersion(DriverVersion&& from) noexcept
    : DriverVersion() {
    *this = ::std::move(from);
  }

  inline DriverVersion& operator=(const DriverVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriverVersion& operator=(DriverVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DriverVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriverVersion* internal_default_instance() {
    return reinterpret_cast<const DriverVersion*>(
               &_DriverVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DriverVersion& a, DriverVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(DriverVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DriverVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DriverVersion* New() const final {
    return CreateMaybeMessage<DriverVersion>(nullptr);
  }

  DriverVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DriverVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DriverVersion& from);
  void MergeFrom(const DriverVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriverVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "habana.DriverVersion";
  }
  protected:
  explicit DriverVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_habana_2eproto);
    return ::descriptor_table_habana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverVersionFieldNumber = 1,
  };
  // string DriverVersion = 1;
  void clear_driverversion();
  const std::string& driverversion() const;
  void set_driverversion(const std::string& value);
  void set_driverversion(std::string&& value);
  void set_driverversion(const char* value);
  void set_driverversion(const char* value, size_t size);
  std::string* mutable_driverversion();
  std::string* release_driverversion();
  void set_allocated_driverversion(std::string* driverversion);
  private:
  const std::string& _internal_driverversion() const;
  void _internal_set_driverversion(const std::string& value);
  std::string* _internal_mutable_driverversion();
  public:

  // @@protoc_insertion_point(class_scope:habana.DriverVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driverversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_habana_2eproto;
};
// -------------------------------------------------------------------

class PCIeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:habana.PCIeInfo) */ {
 public:
  inline PCIeInfo() : PCIeInfo(nullptr) {}
  virtual ~PCIeInfo();

  PCIeInfo(const PCIeInfo& from);
  PCIeInfo(PCIeInfo&& from) noexcept
    : PCIeInfo() {
    *this = ::std::move(from);
  }

  inline PCIeInfo& operator=(const PCIeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCIeInfo& operator=(PCIeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PCIeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PCIeInfo* internal_default_instance() {
    return reinterpret_cast<const PCIeInfo*>(
               &_PCIeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PCIeInfo& a, PCIeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PCIeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCIeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PCIeInfo* New() const final {
    return CreateMaybeMessage<PCIeInfo>(nullptr);
  }

  PCIeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PCIeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PCIeInfo& from);
  void MergeFrom(const PCIeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCIeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "habana.PCIeInfo";
  }
  protected:
  explicit PCIeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_habana_2eproto);
    return ::descriptor_table_habana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 4,
    kBusFieldNumber = 1,
    kDeviceFieldNumber = 2,
    kDomainFieldNumber = 3,
  };
  // string DeviceId = 4;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // int32 Bus = 1;
  void clear_bus();
  ::PROTOBUF_NAMESPACE_ID::int32 bus() const;
  void set_bus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus() const;
  void _internal_set_bus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Device = 2;
  void clear_device();
  ::PROTOBUF_NAMESPACE_ID::int32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device() const;
  void _internal_set_device(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Domain = 3;
  void clear_domain();
  ::PROTOBUF_NAMESPACE_ID::int32 domain() const;
  void set_domain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_domain() const;
  void _internal_set_domain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:habana.PCIeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_;
  ::PROTOBUF_NAMESPACE_ID::int32 domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_habana_2eproto;
};
// -------------------------------------------------------------------

class MACaddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:habana.MACaddress) */ {
 public:
  inline MACaddress() : MACaddress(nullptr) {}
  virtual ~MACaddress();

  MACaddress(const MACaddress& from);
  MACaddress(MACaddress&& from) noexcept
    : MACaddress() {
    *this = ::std::move(from);
  }

  inline MACaddress& operator=(const MACaddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MACaddress& operator=(MACaddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MACaddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MACaddress* internal_default_instance() {
    return reinterpret_cast<const MACaddress*>(
               &_MACaddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MACaddress& a, MACaddress& b) {
    a.Swap(&b);
  }
  inline void Swap(MACaddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MACaddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MACaddress* New() const final {
    return CreateMaybeMessage<MACaddress>(nullptr);
  }

  MACaddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MACaddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MACaddress& from);
  void MergeFrom(const MACaddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MACaddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "habana.MACaddress";
  }
  protected:
  explicit MACaddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_habana_2eproto);
    return ::descriptor_table_habana_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAddressFieldNumber = 1,
  };
  // string mAddress = 1;
  void clear_maddress();
  const std::string& maddress() const;
  void set_maddress(const std::string& value);
  void set_maddress(std::string&& value);
  void set_maddress(const char* value);
  void set_maddress(const char* value, size_t size);
  std::string* mutable_maddress();
  std::string* release_maddress();
  void set_allocated_maddress(std::string* maddress);
  private:
  const std::string& _internal_maddress() const;
  void _internal_set_maddress(const std::string& value);
  std::string* _internal_mutable_maddress();
  public:

  // @@protoc_insertion_point(class_scope:habana.MACaddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_habana_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AIP

// string HLnumber = 1;
inline void AIP::clear_hlnumber() {
  hlnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AIP::hlnumber() const {
  // @@protoc_insertion_point(field_get:habana.AIP.HLnumber)
  return _internal_hlnumber();
}
inline void AIP::set_hlnumber(const std::string& value) {
  _internal_set_hlnumber(value);
  // @@protoc_insertion_point(field_set:habana.AIP.HLnumber)
}
inline std::string* AIP::mutable_hlnumber() {
  // @@protoc_insertion_point(field_mutable:habana.AIP.HLnumber)
  return _internal_mutable_hlnumber();
}
inline const std::string& AIP::_internal_hlnumber() const {
  return hlnumber_.Get();
}
inline void AIP::_internal_set_hlnumber(const std::string& value) {
  
  hlnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AIP::set_hlnumber(std::string&& value) {
  
  hlnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:habana.AIP.HLnumber)
}
inline void AIP::set_hlnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hlnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:habana.AIP.HLnumber)
}
inline void AIP::set_hlnumber(const char* value,
    size_t size) {
  
  hlnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:habana.AIP.HLnumber)
}
inline std::string* AIP::_internal_mutable_hlnumber() {
  
  return hlnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AIP::release_hlnumber() {
  // @@protoc_insertion_point(field_release:habana.AIP.HLnumber)
  return hlnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AIP::set_allocated_hlnumber(std::string* hlnumber) {
  if (hlnumber != nullptr) {
    
  } else {
    
  }
  hlnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hlnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:habana.AIP.HLnumber)
}

// -------------------------------------------------------------------

// DriverVersion

// string DriverVersion = 1;
inline void DriverVersion::clear_driverversion() {
  driverversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DriverVersion::driverversion() const {
  // @@protoc_insertion_point(field_get:habana.DriverVersion.DriverVersion)
  return _internal_driverversion();
}
inline void DriverVersion::set_driverversion(const std::string& value) {
  _internal_set_driverversion(value);
  // @@protoc_insertion_point(field_set:habana.DriverVersion.DriverVersion)
}
inline std::string* DriverVersion::mutable_driverversion() {
  // @@protoc_insertion_point(field_mutable:habana.DriverVersion.DriverVersion)
  return _internal_mutable_driverversion();
}
inline const std::string& DriverVersion::_internal_driverversion() const {
  return driverversion_.Get();
}
inline void DriverVersion::_internal_set_driverversion(const std::string& value) {
  
  driverversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DriverVersion::set_driverversion(std::string&& value) {
  
  driverversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:habana.DriverVersion.DriverVersion)
}
inline void DriverVersion::set_driverversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driverversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:habana.DriverVersion.DriverVersion)
}
inline void DriverVersion::set_driverversion(const char* value,
    size_t size) {
  
  driverversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:habana.DriverVersion.DriverVersion)
}
inline std::string* DriverVersion::_internal_mutable_driverversion() {
  
  return driverversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DriverVersion::release_driverversion() {
  // @@protoc_insertion_point(field_release:habana.DriverVersion.DriverVersion)
  return driverversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DriverVersion::set_allocated_driverversion(std::string* driverversion) {
  if (driverversion != nullptr) {
    
  } else {
    
  }
  driverversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driverversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:habana.DriverVersion.DriverVersion)
}

// -------------------------------------------------------------------

// PCIeInfo

// int32 Bus = 1;
inline void PCIeInfo::clear_bus() {
  bus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::_internal_bus() const {
  return bus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::bus() const {
  // @@protoc_insertion_point(field_get:habana.PCIeInfo.Bus)
  return _internal_bus();
}
inline void PCIeInfo::_internal_set_bus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_ = value;
}
inline void PCIeInfo::set_bus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus(value);
  // @@protoc_insertion_point(field_set:habana.PCIeInfo.Bus)
}

// int32 Device = 2;
inline void PCIeInfo::clear_device() {
  device_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::_internal_device() const {
  return device_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::device() const {
  // @@protoc_insertion_point(field_get:habana.PCIeInfo.Device)
  return _internal_device();
}
inline void PCIeInfo::_internal_set_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_ = value;
}
inline void PCIeInfo::set_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:habana.PCIeInfo.Device)
}

// int32 Domain = 3;
inline void PCIeInfo::clear_domain() {
  domain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::_internal_domain() const {
  return domain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PCIeInfo::domain() const {
  // @@protoc_insertion_point(field_get:habana.PCIeInfo.Domain)
  return _internal_domain();
}
inline void PCIeInfo::_internal_set_domain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  domain_ = value;
}
inline void PCIeInfo::set_domain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:habana.PCIeInfo.Domain)
}

// string DeviceId = 4;
inline void PCIeInfo::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PCIeInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:habana.PCIeInfo.DeviceId)
  return _internal_deviceid();
}
inline void PCIeInfo::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:habana.PCIeInfo.DeviceId)
}
inline std::string* PCIeInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:habana.PCIeInfo.DeviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& PCIeInfo::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void PCIeInfo::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PCIeInfo::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:habana.PCIeInfo.DeviceId)
}
inline void PCIeInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:habana.PCIeInfo.DeviceId)
}
inline void PCIeInfo::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:habana.PCIeInfo.DeviceId)
}
inline std::string* PCIeInfo::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PCIeInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:habana.PCIeInfo.DeviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PCIeInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:habana.PCIeInfo.DeviceId)
}

// -------------------------------------------------------------------

// MACaddress

// string mAddress = 1;
inline void MACaddress::clear_maddress() {
  maddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MACaddress::maddress() const {
  // @@protoc_insertion_point(field_get:habana.MACaddress.mAddress)
  return _internal_maddress();
}
inline void MACaddress::set_maddress(const std::string& value) {
  _internal_set_maddress(value);
  // @@protoc_insertion_point(field_set:habana.MACaddress.mAddress)
}
inline std::string* MACaddress::mutable_maddress() {
  // @@protoc_insertion_point(field_mutable:habana.MACaddress.mAddress)
  return _internal_mutable_maddress();
}
inline const std::string& MACaddress::_internal_maddress() const {
  return maddress_.Get();
}
inline void MACaddress::_internal_set_maddress(const std::string& value) {
  
  maddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MACaddress::set_maddress(std::string&& value) {
  
  maddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:habana.MACaddress.mAddress)
}
inline void MACaddress::set_maddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:habana.MACaddress.mAddress)
}
inline void MACaddress::set_maddress(const char* value,
    size_t size) {
  
  maddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:habana.MACaddress.mAddress)
}
inline std::string* MACaddress::_internal_mutable_maddress() {
  
  return maddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MACaddress::release_maddress() {
  // @@protoc_insertion_point(field_release:habana.MACaddress.mAddress)
  return maddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MACaddress::set_allocated_maddress(std::string* maddress) {
  if (maddress != nullptr) {
    
  } else {
    
  }
  maddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:habana.MACaddress.mAddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace habana

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_habana_2eproto
