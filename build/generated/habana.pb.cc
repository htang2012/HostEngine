// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: habana.proto

#include "habana.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace habana {
class AIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIP> _instance;
} _AIP_default_instance_;
class DriverVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DriverVersion> _instance;
} _DriverVersion_default_instance_;
class PCIeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PCIeInfo> _instance;
} _PCIeInfo_default_instance_;
class MACaddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MACaddress> _instance;
} _MACaddress_default_instance_;
}  // namespace habana
static void InitDefaultsscc_info_AIP_habana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::habana::_AIP_default_instance_;
    new (ptr) ::habana::AIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::habana::AIP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIP_habana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AIP_habana_2eproto}, {}};

static void InitDefaultsscc_info_DriverVersion_habana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::habana::_DriverVersion_default_instance_;
    new (ptr) ::habana::DriverVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::habana::DriverVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DriverVersion_habana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DriverVersion_habana_2eproto}, {}};

static void InitDefaultsscc_info_MACaddress_habana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::habana::_MACaddress_default_instance_;
    new (ptr) ::habana::MACaddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::habana::MACaddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MACaddress_habana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MACaddress_habana_2eproto}, {}};

static void InitDefaultsscc_info_PCIeInfo_habana_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::habana::_PCIeInfo_default_instance_;
    new (ptr) ::habana::PCIeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::habana::PCIeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PCIeInfo_habana_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PCIeInfo_habana_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_habana_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_habana_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_habana_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_habana_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::habana::AIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::habana::AIP, hlnumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::habana::DriverVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::habana::DriverVersion, driverversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::habana::PCIeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::habana::PCIeInfo, bus_),
  PROTOBUF_FIELD_OFFSET(::habana::PCIeInfo, device_),
  PROTOBUF_FIELD_OFFSET(::habana::PCIeInfo, domain_),
  PROTOBUF_FIELD_OFFSET(::habana::PCIeInfo, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::habana::MACaddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::habana::MACaddress, maddress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::habana::AIP)},
  { 6, -1, sizeof(::habana::DriverVersion)},
  { 12, -1, sizeof(::habana::PCIeInfo)},
  { 21, -1, sizeof(::habana::MACaddress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::habana::_AIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::habana::_DriverVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::habana::_PCIeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::habana::_MACaddress_default_instance_),
};

const char descriptor_table_protodef_habana_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014habana.proto\022\006habana\"\027\n\003AIP\022\020\n\010HLnumbe"
  "r\030\001 \001(\t\"&\n\rDriverVersion\022\025\n\rDriverVersio"
  "n\030\001 \001(\t\"I\n\010PCIeInfo\022\013\n\003Bus\030\001 \001(\005\022\016\n\006Devi"
  "ce\030\002 \001(\005\022\016\n\006Domain\030\003 \001(\005\022\020\n\010DeviceId\030\004 \001"
  "(\t\"\036\n\nMACaddress\022\020\n\010mAddress\030\001 \001(\t2\245\001\n\nH"
  "ostEngine\0224\n\014GetDriverVer\022\013.habana.AIP\032\025"
  ".habana.DriverVersion\"\000\022*\n\007ListPCI\022\013.hab"
  "ana.AIP\032\020.habana.PCIeInfo\"\000\0225\n\016ListMACad"
  "dress\022\013.habana.AIP\032\022.habana.MACaddress\"\000"
  "0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_habana_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_habana_2eproto_sccs[4] = {
  &scc_info_AIP_habana_2eproto.base,
  &scc_info_DriverVersion_habana_2eproto.base,
  &scc_info_MACaddress_habana_2eproto.base,
  &scc_info_PCIeInfo_habana_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_habana_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_habana_2eproto = {
  false, false, descriptor_table_protodef_habana_2eproto, "habana.proto", 370,
  &descriptor_table_habana_2eproto_once, descriptor_table_habana_2eproto_sccs, descriptor_table_habana_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_habana_2eproto::offsets,
  file_level_metadata_habana_2eproto, 4, file_level_enum_descriptors_habana_2eproto, file_level_service_descriptors_habana_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_habana_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_habana_2eproto)), true);
namespace habana {

// ===================================================================

void AIP::InitAsDefaultInstance() {
}
class AIP::_Internal {
 public:
};

AIP::AIP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:habana.AIP)
}
AIP::AIP(const AIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hlnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hlnumber().empty()) {
    hlnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hlnumber(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:habana.AIP)
}

void AIP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIP_habana_2eproto.base);
  hlnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AIP::~AIP() {
  // @@protoc_insertion_point(destructor:habana.AIP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AIP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hlnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AIP::ArenaDtor(void* object) {
  AIP* _this = reinterpret_cast< AIP* >(object);
  (void)_this;
}
void AIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIP& AIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIP_habana_2eproto.base);
  return *internal_default_instance();
}


void AIP::Clear() {
// @@protoc_insertion_point(message_clear_start:habana.AIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hlnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string HLnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hlnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "habana.AIP.HLnumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:habana.AIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string HLnumber = 1;
  if (this->hlnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hlnumber().data(), static_cast<int>(this->_internal_hlnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "habana.AIP.HLnumber");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hlnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:habana.AIP)
  return target;
}

size_t AIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:habana.AIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string HLnumber = 1;
  if (this->hlnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hlnumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:habana.AIP)
  GOOGLE_DCHECK_NE(&from, this);
  const AIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:habana.AIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:habana.AIP)
    MergeFrom(*source);
  }
}

void AIP::MergeFrom(const AIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:habana.AIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hlnumber().size() > 0) {
    _internal_set_hlnumber(from._internal_hlnumber());
  }
}

void AIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:habana.AIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIP::CopyFrom(const AIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:habana.AIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIP::IsInitialized() const {
  return true;
}

void AIP::InternalSwap(AIP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hlnumber_.Swap(&other->hlnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DriverVersion::InitAsDefaultInstance() {
}
class DriverVersion::_Internal {
 public:
};

DriverVersion::DriverVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:habana.DriverVersion)
}
DriverVersion::DriverVersion(const DriverVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driverversion().empty()) {
    driverversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_driverversion(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:habana.DriverVersion)
}

void DriverVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DriverVersion_habana_2eproto.base);
  driverversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DriverVersion::~DriverVersion() {
  // @@protoc_insertion_point(destructor:habana.DriverVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DriverVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  driverversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DriverVersion::ArenaDtor(void* object) {
  DriverVersion* _this = reinterpret_cast< DriverVersion* >(object);
  (void)_this;
}
void DriverVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DriverVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriverVersion& DriverVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DriverVersion_habana_2eproto.base);
  return *internal_default_instance();
}


void DriverVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:habana.DriverVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driverversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriverVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string DriverVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_driverversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "habana.DriverVersion.DriverVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DriverVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:habana.DriverVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DriverVersion = 1;
  if (this->driverversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driverversion().data(), static_cast<int>(this->_internal_driverversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "habana.DriverVersion.DriverVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_driverversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:habana.DriverVersion)
  return target;
}

size_t DriverVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:habana.DriverVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DriverVersion = 1;
  if (this->driverversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driverversion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriverVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:habana.DriverVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DriverVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:habana.DriverVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:habana.DriverVersion)
    MergeFrom(*source);
  }
}

void DriverVersion::MergeFrom(const DriverVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:habana.DriverVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driverversion().size() > 0) {
    _internal_set_driverversion(from._internal_driverversion());
  }
}

void DriverVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:habana.DriverVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverVersion::CopyFrom(const DriverVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:habana.DriverVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverVersion::IsInitialized() const {
  return true;
}

void DriverVersion::InternalSwap(DriverVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  driverversion_.Swap(&other->driverversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DriverVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PCIeInfo::InitAsDefaultInstance() {
}
class PCIeInfo::_Internal {
 public:
};

PCIeInfo::PCIeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:habana.PCIeInfo)
}
PCIeInfo::PCIeInfo(const PCIeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  ::memcpy(&bus_, &from.bus_,
    static_cast<size_t>(reinterpret_cast<char*>(&domain_) -
    reinterpret_cast<char*>(&bus_)) + sizeof(domain_));
  // @@protoc_insertion_point(copy_constructor:habana.PCIeInfo)
}

void PCIeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PCIeInfo_habana_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_) -
      reinterpret_cast<char*>(&bus_)) + sizeof(domain_));
}

PCIeInfo::~PCIeInfo() {
  // @@protoc_insertion_point(destructor:habana.PCIeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PCIeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PCIeInfo::ArenaDtor(void* object) {
  PCIeInfo* _this = reinterpret_cast< PCIeInfo* >(object);
  (void)_this;
}
void PCIeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCIeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PCIeInfo& PCIeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PCIeInfo_habana_2eproto.base);
  return *internal_default_instance();
}


void PCIeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:habana.PCIeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&bus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_) -
      reinterpret_cast<char*>(&bus_)) + sizeof(domain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCIeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DeviceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "habana.PCIeInfo.DeviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PCIeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:habana.PCIeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Bus = 1;
  if (this->bus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus(), target);
  }

  // int32 Device = 2;
  if (this->device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_device(), target);
  }

  // int32 Domain = 3;
  if (this->domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_domain(), target);
  }

  // string DeviceId = 4;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "habana.PCIeInfo.DeviceId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:habana.PCIeInfo)
  return target;
}

size_t PCIeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:habana.PCIeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeviceId = 4;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // int32 Bus = 1;
  if (this->bus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus());
  }

  // int32 Device = 2;
  if (this->device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device());
  }

  // int32 Domain = 3;
  if (this->domain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PCIeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:habana.PCIeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PCIeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PCIeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:habana.PCIeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:habana.PCIeInfo)
    MergeFrom(*source);
  }
}

void PCIeInfo::MergeFrom(const PCIeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:habana.PCIeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.bus() != 0) {
    _internal_set_bus(from._internal_bus());
  }
  if (from.device() != 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.domain() != 0) {
    _internal_set_domain(from._internal_domain());
  }
}

void PCIeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:habana.PCIeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCIeInfo::CopyFrom(const PCIeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:habana.PCIeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCIeInfo::IsInitialized() const {
  return true;
}

void PCIeInfo::InternalSwap(PCIeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCIeInfo, domain_)
      + sizeof(PCIeInfo::domain_)
      - PROTOBUF_FIELD_OFFSET(PCIeInfo, bus_)>(
          reinterpret_cast<char*>(&bus_),
          reinterpret_cast<char*>(&other->bus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCIeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MACaddress::InitAsDefaultInstance() {
}
class MACaddress::_Internal {
 public:
};

MACaddress::MACaddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:habana.MACaddress)
}
MACaddress::MACaddress(const MACaddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maddress().empty()) {
    maddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maddress(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:habana.MACaddress)
}

void MACaddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MACaddress_habana_2eproto.base);
  maddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MACaddress::~MACaddress() {
  // @@protoc_insertion_point(destructor:habana.MACaddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MACaddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MACaddress::ArenaDtor(void* object) {
  MACaddress* _this = reinterpret_cast< MACaddress* >(object);
  (void)_this;
}
void MACaddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MACaddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MACaddress& MACaddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MACaddress_habana_2eproto.base);
  return *internal_default_instance();
}


void MACaddress::Clear() {
// @@protoc_insertion_point(message_clear_start:habana.MACaddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MACaddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_maddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "habana.MACaddress.mAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MACaddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:habana.MACaddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mAddress = 1;
  if (this->maddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maddress().data(), static_cast<int>(this->_internal_maddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "habana.MACaddress.mAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_maddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:habana.MACaddress)
  return target;
}

size_t MACaddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:habana.MACaddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mAddress = 1;
  if (this->maddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MACaddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:habana.MACaddress)
  GOOGLE_DCHECK_NE(&from, this);
  const MACaddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MACaddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:habana.MACaddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:habana.MACaddress)
    MergeFrom(*source);
  }
}

void MACaddress::MergeFrom(const MACaddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:habana.MACaddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maddress().size() > 0) {
    _internal_set_maddress(from._internal_maddress());
  }
}

void MACaddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:habana.MACaddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MACaddress::CopyFrom(const MACaddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:habana.MACaddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MACaddress::IsInitialized() const {
  return true;
}

void MACaddress::InternalSwap(MACaddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maddress_.Swap(&other->maddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MACaddress::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace habana
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::habana::AIP* Arena::CreateMaybeMessage< ::habana::AIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::habana::AIP >(arena);
}
template<> PROTOBUF_NOINLINE ::habana::DriverVersion* Arena::CreateMaybeMessage< ::habana::DriverVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::habana::DriverVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::habana::PCIeInfo* Arena::CreateMaybeMessage< ::habana::PCIeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::habana::PCIeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::habana::MACaddress* Arena::CreateMaybeMessage< ::habana::MACaddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::habana::MACaddress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
