// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: habana.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_habana_2eproto__INCLUDED
#define GRPC_habana_2eproto__INCLUDED

#include "habana.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace habana {

// Interface exported by the server.
class HostEngine final {
 public:
  static constexpr char const* service_full_name() {
    return "habana.HostEngine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::DriverVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>> AsyncGetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>>(AsyncGetDriverVerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>> PrepareAsyncGetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>>(PrepareAsyncGetDriverVerRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status ListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::PCIeInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>> AsyncListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>>(AsyncListPCIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>> PrepareAsyncListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>>(PrepareAsyncListPCIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::habana::MACaddress>> ListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::habana::MACaddress>>(ListMACaddressRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>> AsyncListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>>(AsyncListMACaddressRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>> PrepareAsyncListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>>(PrepareAsyncListMACaddressRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // A simple RPC.
      //
      // Obtains the feature at a given position.
      //
      // A feature with an empty name is returned if there's no feature at the given
      // position.
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // A server-to-client streaming RPC.
      //
      // Obtains the Features available within the given Rectangle.  Results are
      // streamed rather than returned at once (e.g. in a response message with a
      // repeated field), as the rectangle may cover a large area and contain a
      // huge number of features.
      virtual void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListMACaddress(::grpc::ClientContext* context, ::habana::AIP* request, ::grpc::ClientReadReactor< ::habana::MACaddress>* reactor) = 0;
      #else
      virtual void ListMACaddress(::grpc::ClientContext* context, ::habana::AIP* request, ::grpc::experimental::ClientReadReactor< ::habana::MACaddress>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>* AsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::habana::DriverVersion>* PrepareAsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>* AsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::habana::PCIeInfo>* PrepareAsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::habana::MACaddress>* ListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>* AsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::habana::MACaddress>* PrepareAsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::DriverVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>> AsyncGetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>>(AsyncGetDriverVerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>> PrepareAsyncGetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>>(PrepareAsyncGetDriverVerRaw(context, request, cq));
    }
    ::grpc::Status ListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::PCIeInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>> AsyncListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>>(AsyncListPCIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>> PrepareAsyncListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>>(PrepareAsyncListPCIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::habana::MACaddress>> ListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::habana::MACaddress>>(ListMACaddressRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::habana::MACaddress>> AsyncListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::habana::MACaddress>>(AsyncListMACaddressRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::habana::MACaddress>> PrepareAsyncListMACaddress(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::habana::MACaddress>>(PrepareAsyncListMACaddressRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)>) override;
      void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)>) override;
      void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListMACaddress(::grpc::ClientContext* context, ::habana::AIP* request, ::grpc::ClientReadReactor< ::habana::MACaddress>* reactor) override;
      #else
      void ListMACaddress(::grpc::ClientContext* context, ::habana::AIP* request, ::grpc::experimental::ClientReadReactor< ::habana::MACaddress>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>* AsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>* PrepareAsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>* AsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>* PrepareAsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::habana::MACaddress>* ListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request) override;
    ::grpc::ClientAsyncReader< ::habana::MACaddress>* AsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::habana::MACaddress>* PrepareAsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDriverVer_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPCI_;
    const ::grpc::internal::RpcMethod rpcmethod_ListMACaddress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetDriverVer(::grpc::ServerContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response);
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status ListPCI(::grpc::ServerContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response);
    virtual ::grpc::Status ListMACaddress(::grpc::ServerContext* context, const ::habana::AIP* request, ::grpc::ServerWriter< ::habana::MACaddress>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDriverVer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDriverVer(::grpc::ServerContext* context, ::habana::AIP* request, ::grpc::ServerAsyncResponseWriter< ::habana::DriverVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPCI() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPCI(::grpc::ServerContext* context, ::habana::AIP* request, ::grpc::ServerAsyncResponseWriter< ::habana::PCIeInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMACaddress() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMACaddress(::grpc::ServerContext* context, ::habana::AIP* request, ::grpc::ServerAsyncWriter< ::habana::MACaddress>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDriverVer<WithAsyncMethod_ListPCI<WithAsyncMethod_ListMACaddress<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDriverVer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::habana::AIP, ::habana::DriverVersion>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::habana::AIP* request, ::habana::DriverVersion* response) { return this->GetDriverVer(context, request, response); }));}
    void SetMessageAllocatorFor_GetDriverVer(
        ::grpc::experimental::MessageAllocator< ::habana::AIP, ::habana::DriverVersion>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::habana::AIP, ::habana::DriverVersion>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDriverVer(
      ::grpc::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDriverVer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListPCI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::habana::AIP, ::habana::PCIeInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::habana::AIP* request, ::habana::PCIeInfo* response) { return this->ListPCI(context, request, response); }));}
    void SetMessageAllocatorFor_ListPCI(
        ::grpc::experimental::MessageAllocator< ::habana::AIP, ::habana::PCIeInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::habana::AIP, ::habana::PCIeInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPCI(
      ::grpc::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPCI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListMACaddress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::habana::AIP, ::habana::MACaddress>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::habana::AIP* request) { return this->ListMACaddress(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::habana::MACaddress>* ListMACaddress(
      ::grpc::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::habana::MACaddress>* ListMACaddress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::habana::AIP* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetDriverVer<ExperimentalWithCallbackMethod_ListPCI<ExperimentalWithCallbackMethod_ListMACaddress<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetDriverVer<ExperimentalWithCallbackMethod_ListPCI<ExperimentalWithCallbackMethod_ListMACaddress<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDriverVer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPCI() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMACaddress() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDriverVer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDriverVer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPCI() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPCI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMACaddress() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMACaddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDriverVer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDriverVer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDriverVer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDriverVer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListPCI() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPCI(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPCI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPCI(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListMACaddress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListMACaddress(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListMACaddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListMACaddress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDriverVer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDriverVer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::habana::AIP, ::habana::DriverVersion>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::habana::AIP, ::habana::DriverVersion>* streamer) {
                       return this->StreamedGetDriverVer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDriverVer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDriverVer(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::DriverVersion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDriverVer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::habana::AIP,::habana::DriverVersion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPCI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPCI() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::habana::AIP, ::habana::PCIeInfo>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::habana::AIP, ::habana::PCIeInfo>* streamer) {
                       return this->StreamedListPCI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPCI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPCI(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::habana::PCIeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPCI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::habana::AIP,::habana::PCIeInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDriverVer<WithStreamedUnaryMethod_ListPCI<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListMACaddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListMACaddress() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::habana::AIP, ::habana::MACaddress>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::habana::AIP, ::habana::MACaddress>* streamer) {
                       return this->StreamedListMACaddress(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListMACaddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMACaddress(::grpc::ServerContext* /*context*/, const ::habana::AIP* /*request*/, ::grpc::ServerWriter< ::habana::MACaddress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListMACaddress(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::habana::AIP,::habana::MACaddress>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListMACaddress<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDriverVer<WithStreamedUnaryMethod_ListPCI<WithSplitStreamingMethod_ListMACaddress<Service > > > StreamedService;
};

}  // namespace habana


#endif  // GRPC_habana_2eproto__INCLUDED
