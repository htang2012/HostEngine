// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: habana.proto

#include "habana.pb.h"
#include "habana.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace habana {

static const char* HostEngine_method_names[] = {
  "/habana.HostEngine/GetDriverVer",
  "/habana.HostEngine/ListPCI",
  "/habana.HostEngine/ListMACaddress",
};

std::unique_ptr< HostEngine::Stub> HostEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HostEngine::Stub> stub(new HostEngine::Stub(channel));
  return stub;
}

HostEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDriverVer_(HostEngine_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPCI_(HostEngine_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMACaddress_(HostEngine_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status HostEngine::Stub::GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::DriverVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDriverVer_, context, request, response);
}

void HostEngine::Stub::experimental_async::GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDriverVer_, context, request, response, std::move(f));
}

void HostEngine::Stub::experimental_async::GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDriverVer_, context, request, response, std::move(f));
}

void HostEngine::Stub::experimental_async::GetDriverVer(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDriverVer_, context, request, response, reactor);
}

void HostEngine::Stub::experimental_async::GetDriverVer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::DriverVersion* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDriverVer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>* HostEngine::Stub::AsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::habana::DriverVersion>::Create(channel_.get(), cq, rpcmethod_GetDriverVer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::habana::DriverVersion>* HostEngine::Stub::PrepareAsyncGetDriverVerRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::habana::DriverVersion>::Create(channel_.get(), cq, rpcmethod_GetDriverVer_, context, request, false);
}

::grpc::Status HostEngine::Stub::ListPCI(::grpc::ClientContext* context, const ::habana::AIP& request, ::habana::PCIeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPCI_, context, request, response);
}

void HostEngine::Stub::experimental_async::ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPCI_, context, request, response, std::move(f));
}

void HostEngine::Stub::experimental_async::ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPCI_, context, request, response, std::move(f));
}

void HostEngine::Stub::experimental_async::ListPCI(::grpc::ClientContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPCI_, context, request, response, reactor);
}

void HostEngine::Stub::experimental_async::ListPCI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::habana::PCIeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPCI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>* HostEngine::Stub::AsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::habana::PCIeInfo>::Create(channel_.get(), cq, rpcmethod_ListPCI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::habana::PCIeInfo>* HostEngine::Stub::PrepareAsyncListPCIRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::habana::PCIeInfo>::Create(channel_.get(), cq, rpcmethod_ListPCI_, context, request, false);
}

::grpc::ClientReader< ::habana::MACaddress>* HostEngine::Stub::ListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::habana::MACaddress>::Create(channel_.get(), rpcmethod_ListMACaddress_, context, request);
}

void HostEngine::Stub::experimental_async::ListMACaddress(::grpc::ClientContext* context, ::habana::AIP* request, ::grpc::experimental::ClientReadReactor< ::habana::MACaddress>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::habana::MACaddress>::Create(stub_->channel_.get(), stub_->rpcmethod_ListMACaddress_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::habana::MACaddress>* HostEngine::Stub::AsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::habana::MACaddress>::Create(channel_.get(), cq, rpcmethod_ListMACaddress_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::habana::MACaddress>* HostEngine::Stub::PrepareAsyncListMACaddressRaw(::grpc::ClientContext* context, const ::habana::AIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::habana::MACaddress>::Create(channel_.get(), cq, rpcmethod_ListMACaddress_, context, request, false, nullptr);
}

HostEngine::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HostEngine_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HostEngine::Service, ::habana::AIP, ::habana::DriverVersion>(
          [](HostEngine::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::habana::AIP* req,
             ::habana::DriverVersion* resp) {
               return service->GetDriverVer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HostEngine_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HostEngine::Service, ::habana::AIP, ::habana::PCIeInfo>(
          [](HostEngine::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::habana::AIP* req,
             ::habana::PCIeInfo* resp) {
               return service->ListPCI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HostEngine_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HostEngine::Service, ::habana::AIP, ::habana::MACaddress>(
          [](HostEngine::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::habana::AIP* req,
             ::grpc_impl::ServerWriter<::habana::MACaddress>* writer) {
               return service->ListMACaddress(ctx, req, writer);
             }, this)));
}

HostEngine::Service::~Service() {
}

::grpc::Status HostEngine::Service::GetDriverVer(::grpc::ServerContext* context, const ::habana::AIP* request, ::habana::DriverVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HostEngine::Service::ListPCI(::grpc::ServerContext* context, const ::habana::AIP* request, ::habana::PCIeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HostEngine::Service::ListMACaddress(::grpc::ServerContext* context, const ::habana::AIP* request, ::grpc::ServerWriter< ::habana::MACaddress>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace habana

